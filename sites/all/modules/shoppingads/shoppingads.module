<?php
/**
 * $Id: shoppingads.module,v 1.2 2008/02/17 17:04:38 yaph Exp $
 *
 * @file
 * Author: Ramiro GÃ³mez - http://www.ramiro.org
 * A Drupal module that adds ShoppingAds.com advertising on your website.
 *
 * TODO input filter, ad preview, blocks, color picker?
 */

/**
 * Implementation of hook_menu().
 */
function shoppingads_menu() {
  $items = array();
  $items['admin/settings/shoppingads'] = array(
    'title' => 'Shoppingads',
    'description' => 'Enable the node types and set the properties for the shoppingads.com advertising.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shoppingads_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function shoppingads_theme() {
  return array(
    'shoppingads_ad' => array()
  );
}

/**
 * admin settings for the shoppingads module
 */
function shoppingads_admin_settings() {
  $form = array();
  $form['shoppingads'] = array(
    '#type' => 'fieldset',
    '#title' => 'shoppingads '. t('settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  
  $form['shoppingads']['shoppingads_publisher_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Publisher ID'),
    '#default_value' => variable_get('shoppingads_publisher_id', ''),
    '#size' => 30,
    '#maxlength' => 30,
    '#required' => TRUE,
    '#description' => t('Enter your shoppingads.com publisher ID.')
  );
  
  $form['shoppingads']['shoppingads_ad_campaign'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign ID'),
    '#default_value' => variable_get('shoppingads_ad_campaign', 'default'),
    '#size' => 40,
    '#maxlength' => 40,
    '#description' => t('Enter an shoppingads.com campaign ID (optional).')
  );
  
  $form['shoppingads']['shoppingads_ad_format'] = array(
    '#type' => 'select',
    '#title' => t('Ad Format'),
    '#default_value' => variable_get('shoppingads_ad_format', ''),
    '#options' => shoppingads_ad_formats(),
    '#required' => TRUE,
    '#description' => t('The Ad format you want to use in your nodes.')
  );

  $form['shoppingads']['shoppingads_ad_attitude'] = array(
    '#type' => 'select',
    '#title' => t('Attitude Selection'),
    '#default_value' => variable_get('shoppingads_ad_attitude', ''),
    '#options' => array(
        'true' => 'Classic',
        'false' => 'Basic',
        'cool' => 'Cool Blue',
        'fader' => 'Ad Fader',
        'etched' => 'Etched'
        ),
    '#required' => TRUE,
    '#description' => t('The Ad style.')
  );

  $form['shoppingads']['shoppingads_weight'] = array(
    '#type' => 'select',
    '#title' => t('Weight'),
    '#default_value' => variable_get('shoppingads_weight', 0),
    '#options' => drupal_map_assoc(range(-20, 20)),
    '#description' => t('Specifies the position of the ad. A low weight, e.g. <strong>-20</strong> will display the ad above the content and a high weight, e.g. <strong>20</strong> below the content.')
  );
  
  $form['shoppingads']['shoppingads_new_window'] = array(
    '#type' => 'checkbox',
    '#title' => t('New window'),
    '#default_value' => variable_get('shoppingads_new_window', ''),
    '#description' => t('Check this to open ad links in a new window.')
  );
  
  $form['shoppingads']['shoppingads_teaser_full_view'] = array(
    '#type' => 'select',
    '#title' => t('Display in teaser and/or full view'),
    '#default_value' => variable_get('shoppingads_teaser_full_view', 0),
    '#options' => array(0 => t('Full view'), 1 => t('Teaser'), 2 => t('Teasers and full view')),
    '#description' => t('When to display shoppingads.'),
  );
  
  $form['shoppingads']['shoppingads_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node Types'),
    '#default_value' => variable_get('shoppingads_node_types', array()),
    '#options' => node_get_types('names'),
    '#description' => t('Activate the node types where shoppingads.com advertising shall be displayed.')
  );

    // Ad keywords
  $form['shoppingads_kw'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ad Keywords'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  
    $form['shoppingads_kw']['shoppingads_keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Ad Keywords'),
    '#default_value' => variable_get('shoppingads_keywords', ''),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#description' => t('Enter up to 15 keywords separated by semicolons ";". The keywords determine what kind of ads are displayed is as few as possible.')
  );

  if (module_exists('taxonomy')) {  
    $form['shoppingads_kw']['shoppingads_use_terms_as_keywords'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use terms as keywords'),
      '#default_value' => variable_get('shoppingads_use_terms_as_keywords', ''),
      '#description' => t('By activating this option the terms/tags associated with the node will be used as keywords. If no terms are associated with the displayed node the keywords entered above will be used. For this feature the taxonomy module must be enabled.')
    );
    $v_options = shoppingads_get_vocabularies_options();
    $form['shoppingads_kw']['shoppingads_restrict_vocabulary'] = array(
      '#type' => 'select',
      '#title' => t('Restrict to vocabulary'),
      '#options' => $v_options,
      '#default_value' => variable_get('shoppingads_restrict_vocabulary', 0),
      '#description' => t('If you activated the <strong>Use terms as keywords</strong> option you can restrict the terms used as Ad search words to one vocabulary.')
    );
    $form['shoppingads_kw']['shoppingads_term_limit'] = array(
      '#type' => 'select',
      '#title' => t('Number of terms'),
      '#default_value' => variable_get('shoppingads_term_limit', 2),
      '#options' => drupal_map_assoc(range(1, 15)),
      '#description' => t('If you activated the <strong>Use terms as keywords</strong> option you can limit the number of terms to be used as search ad words here. 15 is the maximum number currently supported by shoppingads.')
    );
  }
  
  // Ad colors  
  $form['shoppingads_colors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ad Colors'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  foreach (shoppingads_ad_colors() as $area => $color) {
    $title = ucwords(str_replace('_', ' ', $area));
    $form['shoppingads_colors'][$area] = array(
      '#type' => 'textfield',
      '#title' => $title,
      '#default_value' => variable_get($area, $color),
      '#size' => 6,
      '#maxlength' => 6,
      '#description' => t('Enter a hexadecimal color value here, e.g. <code>ff9900</code>.')
    );
  }
  return system_settings_form($form);
}
/**
 * Implementation of hook_nodeapi().
 */
function shoppingads_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'view') {
    //Check our node is one of the checked types
    if (in_array($node->type, variable_get('shoppingads_node_types', array()), TRUE)) {
      $display_ad = FALSE;
      switch (variable_get('shoppingads_teaser_full_view', 0)) {
        // display in full view only
        case 0:
          if (!$a3) {
            $display_ad = TRUE;
          }
          break;
        // display in teaser only
        case 1:
          if ($a3) {
            $display_ad = TRUE;
          }
          break;
        // display in full view and teaser
        case 2:
          $display_ad = TRUE;
          break;
      }
      if ($display_ad) {
        $node->content['shoppingads_ad'] = array(
          '#value' => theme('shoppingads_ad'),
          '#weight' => variable_get('shoppingads_weight', 0)
        );
      }
    }
  }
}

function shoppingads_generate_ad_code() {
  // get color values  
  $ad_colors = shoppingads_ad_colors();
  $shoppingads_color_border = variable_get('outer_border_color', $ad_colors['outer_border_color']);
  $shoppingads_color_bg = variable_get('background_color', $ad_colors['background_color']);
  $shoppingads_color_heading = variable_get('heading_color', $ad_colors['heading_color']);
  $shoppingads_color_text = variable_get('description_color', $ad_colors['description_color']);
  $shoppingads_color_link = variable_get('link_color', $ad_colors['link_color']);
  
  // get keywords
  $ad_kw = variable_get('shoppingads_keywords', '');
  if (variable_get('shoppingads_use_terms_as_keywords', '')) {
    if (is_numeric(arg(1))) {
      $nid = arg(1);
      $terms = array();
      $vid = variable_get('shoppingads_restrict_vocabulary', 0);
      if ($vid != 0) {
        $terms = module_invoke('taxonomy', 'node_get_terms_by_vocabulary', $nid, $vid, 'tid');
      }
      else {
        $terms = module_invoke('taxonomy', 'node_get_terms', $nid);
      }
      $keywords = array();
      $count = 0;
      $term_limit = variable_get('shoppingads_term_limit', 2);
      foreach ($terms as $t) {
        // 15 is the maximum number of keywords supported by shoppingads
        if ($count < $term_limit) {
          array_push($keywords, $t->name);
        }
        $count++;
      }
      if ($count > 0) {
        $ad_kw = implode(';', $keywords);
      }
    }
  }
  
  $ad_client = variable_get('shoppingads_publisher_id', '');
  $ad_format = variable_get('shoppingads_ad_format', '');
  $ad_campaign = variable_get('shoppingads_ad_campaign', 'default');
  $attitude = variable_get('shoppingads_ad_attitude', '');
  $attitude = 'shoppingads_attitude = "'. $attitude .'";';
  list($width, $height) = explode('x', $ad_format, 2);
  if (!$width) $width = 768;
  if (!$height) $height = 90;
  
  // new window
  if (variable_get('shoppingads_new_window', '')) {
    $new_window = 'shoppingads_options = "n";';
  }
  
  $shoppingads_code =<<<EOF
<script type="text/javascript"><!--
shoppingads_ad_client = "$ad_client";
shoppingads_ad_campaign = "$ad_campaign";
shoppingads_ad_width = "$width";
shoppingads_ad_height = "$height";
shoppingads_ad_kw = "$ad_kw";
shoppingads_color_border = "$shoppingads_color_border";
shoppingads_color_bg = "$shoppingads_color_bg";
shoppingads_color_heading = "$shoppingads_color_heading";
shoppingads_color_text =  "$shoppingads_color_text";
shoppingads_color_link =  "$shoppingads_color_link";
$attitude
$new_window
--></script>
<script type="text/javascript" src="http://ads.shoppingads.com/pagead/show_sa_ads.js">
</script>
EOF;
  return $shoppingads_code;
}

/**
 * theme function for ad display
 */
function theme_shoppingads_ad() {
  $ad_code = shoppingads_generate_ad_code();
  return '<div class="shoppingads-ad-code">'. $ad_code .'</div>';
}

function shoppingads_ad_formats() {
  $ad_formats = array(
    '728x90' => ('728 x 90 Leaderboard'),
    '468x60' => ('468 x 60 Banner'),
    '336x280' => ('336 x 280 Large Rectangle'),
    '300x250' => ('300 x 250 Medium rectangle'),
    '250x250' => ('250 x 250 Square'),
    '234x60' => ('234 x 60 Half Banner'),
    '180x150' => ('180 x 150 Small Rectangle'),
    '160x600' => ('160 x 600 Wide Skyscraper'),
    '125x125' => ('125 x 125 Button'),
    '120x600' => ('120 x 600 Skyscraper'),
    '120x240' => ('120 x 240 Vertical Banner')
  );
  return $ad_formats;
}

function shoppingads_ad_colors() {
  // array of colors with default values
  $ad_colors = array(
    'outer_border_color' => 'CFF8A3',
    'background_color' => 'FFFFFF',
    'heading_color' => '00A0E2',
    'description_color' => '000000',
    'link_color' => '008000'
  );
  return $ad_colors;
}

function shoppingads_get_vocabularies_options() {
  $vocabularies = module_invoke('taxonomy', 'get_vocabularies');
  $options[0] = 'Select vocabulary';
  foreach ($vocabularies as $v) {
    $options[$v->vid] = $v->name;
  }
  return $options;
}